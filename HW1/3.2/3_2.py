# -*- coding: utf-8 -*-
"""3.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14FLcTLSksJhsYLYRSKGTBurWlMLiwuDj
"""

import pandas as pd
import networkx as nx

def load_data_for_q3(filename1, filename2):
    """
    Helper function for Question 3
    Takes in filename1 of the data that contains src, target pairs, that are separated by some blank chars, with no header info (e.g., no column name provided)
    Also, takes in filename2 of the csv file with 4 columns: userid, movieid, rating, date 
    Returns the dataframe of node pairs and the directed graph G from filename1, and a dataframe of filename2
    # NOTE: It's your job to construct a graph from from df_ratings_timed

    >>> filename1 = "datasets/q3/network.txt"
    >>> filename2 = "datasets/q3/Ratings.timed.csv"
    >>> df_network, G_network, df_ratings_timed = load_data_for_q3(filename1, filename2)
    >>> print("df_network shape: {}".format(df_network.shape))
    df_network shape: (59625, 2)
    >>> print("df_network first 5 rows: \n{}".format(df_network.head()))
    df_network first 5 rows:
    src  dst
    0    1    2
    1    1    3
    2    1    4
    3    1    5
    4    1    6
    >>> print("Information on directed graph G. \n{}".format(nx.info(G_network)))
    Information on directed graph G.
    Name:
    Type: DiGraph
    Number of nodes: 10000
    Number of edges: 59625
    Average in degree:   5.9625
    Average out degree:   5.9625
    >>>
    >>> print("df_ratings_timed shape: {}".format(df_ratings_timed.shape))
    df_ratings_timed shape: (55165, 4)
    >>> print("df_ratings_timed first 5 rows: \n{}".format(df_ratings_timed.head()))
    df_ratings_timed first 5 rows:
    userid  movieid  rating       date
    0     888    26377     0.5 2009-09-17
    1     888    53324     0.5 2009-09-17
    2    5153     3801     4.5 2009-05-17
    3    5153     7877     4.5 2009-03-25
    4    5153     9229     4.0 2009-01-08
    """
    # Read data
    df_network = pd.read_csv(filename1, header=None, delimiter=r"\s+", names=["src", "dst"])
    # Construct networkx graph object
    G = nx.from_pandas_edgelist(df_network, "src", "dst", create_using=nx.DiGraph())
    # Read another file
    df_ratings_timed = pd.read_csv(filename2, parse_dates=["date"])
    return df_network, G, df_ratings_timed

df_network, G, df_ratings_timed=load_data_for_q3('/content/network.txt', '/content/Ratings.timed.csv')

from math import comb
from tqdm import tqdm
from itertools import combinations
u=[]
n=[]
ab=[]
bc=[]
count=0
mid=df_ratings_timed['movieid'].unique().tolist()
for m in tqdm(mid):
  d=df_ratings_timed[df_ratings_timed['movieid']==m]
  d=d.sort_values(by=['date'])
  cascade=d['userid'].tolist()
  if len(cascade)>1:
    count+=1
  if len(cascade)>1:
    combi=list(combinations(cascade,2))
    for [a,b] in combi:
      if G.has_edge(a,b):
        u.append(a)
        n.append(b)
      else:
        ab.append(a)
        bc.append(b)
df=pd.DataFrame()
df['v']=u
df['u']=n

un_v=df['v'].unique().tolist()
v=[]
u=[]
p_vu=[]
for vi in tqdm(un_v):
  un_u=df[df['v']==vi]['u'].unique().tolist()
  vid=df[df['v']==vi]
  for ui in un_u:
    uid=vid[vid['u']==ui]
    v.append(vi)
    u.append(ui)
    p=len(uid)/len(vid)
    p_vu.append(p)
df1=pd.DataFrame()
df1['v']=v
df1['u']=u
df1['p']=p_vu
df2=pd.DataFrame()
df2['v']=ab
df2['u']=bc
df2['p']=[0 for i in range(len(df2))]
df2=df2.drop_duplicates()
print(len(df2))
dfx=pd.concat([df1,df2],0)
len(dfx)

dfx.to_csv('Optimal prob.csv')
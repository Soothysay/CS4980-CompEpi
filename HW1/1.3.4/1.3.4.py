# -*- coding: utf-8 -*-
"""Untitled100.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11tRVFZSXCMu1QravV2IObnNLM-s997a-
"""

import pandas as pd
import numpy as np
import networkx as nx
import random
from tqdm import tqdm
from random import sample
def test_transmission(u, v, p):
  return random.random()<p
def discrete_SIR(G,beta,gamma,I_0,R_0,max_time):
  Infected=I_0
  Recovered=R_0
  total=list(G.nodes)
  Susceptible=list(set(total)-set(Infected)-set(Recovered))
  tim=[]
  N_SUS=[]
  N_INF=[]
  N_REC=[]
  #max_time=1000
  tim.append(0)
  N_SUS.append(len(Susceptible))
  N_INF.append(len(Infected))
  N_REC.append(len(Recovered))
  for t in range(max_time-1):
      new_infected=[]
      # Propagating Infection
      for u in Susceptible:
        nbrs=[n for n in G.neighbors(u)]
        v=sample(nbrs,1)[0]
        if v in Infected:
          if test_transmission(u,v,beta):
            new_infected.append(u)
      Susceptible=list(set(Susceptible)-set(new_infected))
      """for u in Infected:
        nbrs=[n for n in G.neighbors(u)]
        sus_nbrs=set(nbrs).intersection(Susceptible)
        if len(sus_nbrs)>0:
          v=sample(sus_nbrs,1)[0]
          if test_transmission(u,v,beta):
            new_infected.append(v)
        if len(new_infected)>0:
          #print(new_infected)
          Susceptible=list(set(Susceptible)-set(new_infected))"""
      for u in Infected:
        if test_transmission(u,u,gamma):
          Recovered.append(u)
          Infected.remove(u)
      Infected=Infected+new_infected
      tim.append(t+1)
      N_SUS.append(len(Susceptible))
      N_INF.append(len(Infected))
      N_REC.append(len(Recovered))
  return tim,N_SUS,N_INF,N_REC

G=nx.complete_graph(10000)

x=nx.enumerate_all_cliques(G)

sir_out=pd.DataFrame()
for i in range(50):
  I0=sample(list(G.nodes()),round(0.107980*10000))
  ri=list(set(list(G.nodes()))-set(I0))
  R0=sample(ri,round(0.002039*10000))
  t,S,I,R=discrete_SIR(G,4.94614556e-02, 9.22423666e-06,I0,R0,900)
  if len(sir_out)==0:
    sir_out['t']=t
    sir_out['S']=S
    sir_out['I']=I
    sir_out['R']=R
    
  else:
    sir_out['S1']=S
    sir_out['I1']=I
    sir_out['R1']=R
    sir_out['S']=sir_out['S']+sir_out['S1']
    sir_out['I']=sir_out['I']+sir_out['I1']
    sir_out['R']=sir_out['R']+sir_out['R1']
    #print(sir_out)
sir_out['S']=sir_out['S']/50
sir_out['I']=sir_out['I']/50
sir_out['R']=sir_out['R']/50

sir_out

import matplotlib.pyplot as plt
sline = plt.plot("t","S","",data=sir_out,color="red",linewidth=2)
iline = plt.plot("t","I","",data=sir_out,color="green",linewidth=2)
rline = plt.plot("t","R","",data=sir_out,color="blue",linewidth=2)
plt.xlabel("Time",fontweight="bold")
plt.ylabel("Number",fontweight="bold")
legend = plt.legend(title="Population",loc=5,bbox_to_anchor=(1.25,0.5))
frame = legend.get_frame()
frame.set_facecolor("white")
frame.set_linewidth(0)
plt.savefig('SIR_9.png')
# -*- coding: utf-8 -*-
"""Q4.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ePX3eDdnR8GvxKsSETlOkrLlofOLiMJ-
"""

import networkx

G = networkx.random_graphs.extended_barabasi_albert_graph(50, 1, 0.2, 0.1,seed=10)

networkx.draw(G)

"""Part 1"""

terminal_nodes=[10,14,3]

min_st=networkx.algorithms.approximation.steinertree.steiner_tree(G, terminal_nodes, method='mehlhorn')

list(min_st.nodes)

A = networkx.adjacency_matrix(min_st)

import scipy
scipy.sparse.save_npz('Adj1.npz', A)

import matplotlib.pyplot as plt
subset_sizes =list(G.nodes)
colour=[]
for n in list(G.nodes):
  if n in list(min_st.nodes):
    colour.append('red')
  else:
    colour.append('blue')
pos = networkx.spring_layout(G)
plt.figure(figsize=(8, 8))
networkx.draw(G, pos, node_color=colour, with_labels=False)
plt.axis("equal")
plt.show()

"""Part 2"""

terminal_nodes=[10,14,3,4,2]

min_st=networkx.algorithms.approximation.steinertree.steiner_tree(G, terminal_nodes, method='mehlhorn')

A = networkx.adjacency_matrix(min_st)

import scipy
scipy.sparse.save_npz('Adj2.npz', A)

import matplotlib.pyplot as plt
subset_sizes =list(G.nodes)
colour=[]
for n in list(G.nodes):
  if n in list(min_st.nodes):
    colour.append('red')
  else:
    colour.append('blue')
pos = networkx.spring_layout(G)
plt.figure(figsize=(8, 8))
networkx.draw(G, pos, node_color=colour, with_labels=False)
plt.axis("equal")
plt.show()

"""Part 3"""

terminal_nodes=[10,14,3,4,2,31,49]

min_st=networkx.algorithms.approximation.steinertree.steiner_tree(G, terminal_nodes, method='mehlhorn')

A = networkx.adjacency_matrix(min_st)

import scipy
scipy.sparse.save_npz('Adj3.npz', A)

import matplotlib.pyplot as plt
subset_sizes =list(G.nodes)
colour=[]
for n in list(G.nodes):
  if n in list(min_st.nodes):
    colour.append('red')
  else:
    colour.append('blue')
pos = networkx.spring_layout(G)
plt.figure(figsize=(8, 8))
networkx.draw(G, pos, node_color=colour, with_labels=False)
plt.axis("equal")
plt.show()

"""Part 4"""

terminal_nodes=[10,14,3,4,2,31,49,21,25,36,43]

min_st=networkx.algorithms.approximation.steinertree.steiner_tree(G, terminal_nodes,method='mehlhorn')

A = networkx.adjacency_matrix(min_st)

import scipy
scipy.sparse.save_npz('Adj4.npz', A)

import matplotlib.pyplot as plt
subset_sizes =list(G.nodes)
colour=[]
for n in list(G.nodes):
  if n in list(min_st.nodes):
    colour.append('red')
  else:
    colour.append('blue')
pos = networkx.spring_layout(G)
plt.figure(figsize=(8, 8))
networkx.draw(G, pos, node_color=colour, with_labels=False)
plt.axis("equal")
plt.show()